# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Client {
  id: ID!
  name: String
  phone: String
  contactMethod: String
  question: String
  createdAt: DateTime
}

input ClientWhereUniqueInput {
  id: ID
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  id: IDFilter
  name: StringFilter
  phone: StringFilter
  contactMethod: StringNullableFilter
  question: StringFilter
  createdAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input ClientOrderByInput {
  id: OrderDirection
  name: OrderDirection
  phone: OrderDirection
  contactMethod: OrderDirection
  question: OrderDirection
  createdAt: OrderDirection
}

input ClientUpdateInput {
  name: String
  phone: String
  contactMethod: String
  question: String
  createdAt: DateTime
}

input ClientUpdateArgs {
  where: ClientWhereUniqueInput!
  data: ClientUpdateInput!
}

input ClientCreateInput {
  name: String
  phone: String
  contactMethod: String
  question: String
  createdAt: DateTime
}

type Title {
  id: ID!
  name: String
  details: String
  title: String
  description: String
  createdAt: DateTime
}

input TitleWhereUniqueInput {
  id: ID
}

input TitleWhereInput {
  AND: [TitleWhereInput!]
  OR: [TitleWhereInput!]
  NOT: [TitleWhereInput!]
  id: IDFilter
  name: StringFilter
  details: StringFilter
  title: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
}

input TitleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  details: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input TitleUpdateInput {
  name: String
  details: String
  title: String
  description: String
  createdAt: DateTime
}

input TitleUpdateArgs {
  where: TitleWhereUniqueInput!
  data: TitleUpdateInput!
}

input TitleCreateInput {
  name: String
  details: String
  title: String
  description: String
  createdAt: DateTime
}

type Document {
  id: ID!
  slug: String
  title: String
  description: String
  content: Document_content_Document
  createdAt: DateTime
  updatedAt: DateTime
}

type Document_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input DocumentWhereUniqueInput {
  id: ID
  slug: String
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: IDFilter
  slug: StringFilter
  title: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input DocumentOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DocumentUpdateInput {
  slug: String
  title: String
  description: String
  content: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentUpdateArgs {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateInput!
}

input DocumentCreateInput {
  slug: String
  title: String
  description: String
  content: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type Contact {
  id: ID!
  name: String
  value: String
  createdAt: DateTime
}

input ContactWhereUniqueInput {
  id: ID
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  id: IDFilter
  name: StringFilter
  value: StringFilter
  createdAt: DateTimeNullableFilter
}

input ContactOrderByInput {
  id: OrderDirection
  name: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
}

input ContactUpdateInput {
  name: String
  value: String
  createdAt: DateTime
}

input ContactUpdateArgs {
  where: ContactWhereUniqueInput!
  data: ContactUpdateInput!
}

input ContactCreateInput {
  name: String
  value: String
  createdAt: DateTime
}

type About {
  id: ID!
  title: String
  text: String
  createdAt: DateTime
}

input AboutWhereUniqueInput {
  id: ID
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  id: IDFilter
  title: StringFilter
  text: StringFilter
  createdAt: DateTimeNullableFilter
}

input AboutOrderByInput {
  id: OrderDirection
  title: OrderDirection
  text: OrderDirection
  createdAt: OrderDirection
}

input AboutUpdateInput {
  title: String
  text: String
  createdAt: DateTime
}

input AboutUpdateArgs {
  where: AboutWhereUniqueInput!
  data: AboutUpdateInput!
}

input AboutCreateInput {
  title: String
  text: String
  createdAt: DateTime
}

type Statistic {
  id: ID!
  title: String
  text: String
  createdAt: DateTime
}

input StatisticWhereUniqueInput {
  id: ID
}

input StatisticWhereInput {
  AND: [StatisticWhereInput!]
  OR: [StatisticWhereInput!]
  NOT: [StatisticWhereInput!]
  id: IDFilter
  title: StringFilter
  text: StringFilter
  createdAt: DateTimeNullableFilter
}

input StatisticOrderByInput {
  id: OrderDirection
  title: OrderDirection
  text: OrderDirection
  createdAt: OrderDirection
}

input StatisticUpdateInput {
  title: String
  text: String
  createdAt: DateTime
}

input StatisticUpdateArgs {
  where: StatisticWhereUniqueInput!
  data: StatisticUpdateInput!
}

input StatisticCreateInput {
  title: String
  text: String
  createdAt: DateTime
}

type Possibilitie {
  id: ID!
  title: String
  text: String
  points(where: PossibilitiePointWhereInput! = {}, orderBy: [PossibilitiePointOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PossibilitiePointWhereUniqueInput): [PossibilitiePoint!]
  pointsCount(where: PossibilitiePointWhereInput! = {}): Int
  createdAt: DateTime
}

input PossibilitieWhereUniqueInput {
  id: ID
}

input PossibilitieWhereInput {
  AND: [PossibilitieWhereInput!]
  OR: [PossibilitieWhereInput!]
  NOT: [PossibilitieWhereInput!]
  id: IDFilter
  title: StringFilter
  text: StringFilter
  points: PossibilitiePointManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input PossibilitiePointManyRelationFilter {
  every: PossibilitiePointWhereInput
  some: PossibilitiePointWhereInput
  none: PossibilitiePointWhereInput
}

input PossibilitieOrderByInput {
  id: OrderDirection
  title: OrderDirection
  text: OrderDirection
  createdAt: OrderDirection
}

input PossibilitieUpdateInput {
  title: String
  text: String
  points: PossibilitiePointRelateToManyForUpdateInput
  createdAt: DateTime
}

input PossibilitiePointRelateToManyForUpdateInput {
  disconnect: [PossibilitiePointWhereUniqueInput!]
  set: [PossibilitiePointWhereUniqueInput!]
  create: [PossibilitiePointCreateInput!]
  connect: [PossibilitiePointWhereUniqueInput!]
}

input PossibilitieUpdateArgs {
  where: PossibilitieWhereUniqueInput!
  data: PossibilitieUpdateInput!
}

input PossibilitieCreateInput {
  title: String
  text: String
  points: PossibilitiePointRelateToManyForCreateInput
  createdAt: DateTime
}

input PossibilitiePointRelateToManyForCreateInput {
  create: [PossibilitiePointCreateInput!]
  connect: [PossibilitiePointWhereUniqueInput!]
}

type Stage {
  id: ID!
  title: String
  text: String
  happening(where: StagePointWhereInput! = {}, orderBy: [StagePointOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StagePointWhereUniqueInput): [StagePoint!]
  happeningCount(where: StagePointWhereInput! = {}): Int
  createdAt: DateTime
}

input StageWhereUniqueInput {
  id: ID
}

input StageWhereInput {
  AND: [StageWhereInput!]
  OR: [StageWhereInput!]
  NOT: [StageWhereInput!]
  id: IDFilter
  title: StringFilter
  text: StringFilter
  happening: StagePointManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input StagePointManyRelationFilter {
  every: StagePointWhereInput
  some: StagePointWhereInput
  none: StagePointWhereInput
}

input StageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  text: OrderDirection
  createdAt: OrderDirection
}

input StageUpdateInput {
  title: String
  text: String
  happening: StagePointRelateToManyForUpdateInput
  createdAt: DateTime
}

input StagePointRelateToManyForUpdateInput {
  disconnect: [StagePointWhereUniqueInput!]
  set: [StagePointWhereUniqueInput!]
  create: [StagePointCreateInput!]
  connect: [StagePointWhereUniqueInput!]
}

input StageUpdateArgs {
  where: StageWhereUniqueInput!
  data: StageUpdateInput!
}

input StageCreateInput {
  title: String
  text: String
  happening: StagePointRelateToManyForCreateInput
  createdAt: DateTime
}

input StagePointRelateToManyForCreateInput {
  create: [StagePointCreateInput!]
  connect: [StagePointWhereUniqueInput!]
}

type Case {
  id: ID!
  direction: String
  title: String
  text: String
  solution: String
  effect: String
  createdAt: DateTime
}

input CaseWhereUniqueInput {
  id: ID
}

input CaseWhereInput {
  AND: [CaseWhereInput!]
  OR: [CaseWhereInput!]
  NOT: [CaseWhereInput!]
  id: IDFilter
  direction: StringFilter
  title: StringFilter
  text: StringFilter
  solution: StringFilter
  effect: StringFilter
  createdAt: DateTimeNullableFilter
}

input CaseOrderByInput {
  id: OrderDirection
  direction: OrderDirection
  title: OrderDirection
  text: OrderDirection
  solution: OrderDirection
  effect: OrderDirection
  createdAt: OrderDirection
}

input CaseUpdateInput {
  direction: String
  title: String
  text: String
  solution: String
  effect: String
  createdAt: DateTime
}

input CaseUpdateArgs {
  where: CaseWhereUniqueInput!
  data: CaseUpdateInput!
}

input CaseCreateInput {
  direction: String
  title: String
  text: String
  solution: String
  effect: String
  createdAt: DateTime
}

type Faq {
  id: ID!
  question: String
  answer: String
  createdAt: DateTime
}

input FaqWhereUniqueInput {
  id: ID
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IDFilter
  question: StringFilter
  answer: StringFilter
  createdAt: DateTimeNullableFilter
}

input FaqOrderByInput {
  id: OrderDirection
  question: OrderDirection
  answer: OrderDirection
  createdAt: OrderDirection
}

input FaqUpdateInput {
  question: String
  answer: String
  createdAt: DateTime
}

input FaqUpdateArgs {
  where: FaqWhereUniqueInput!
  data: FaqUpdateInput!
}

input FaqCreateInput {
  question: String
  answer: String
  createdAt: DateTime
}

type PossibilitiePoint {
  id: ID!
  name: String
  possibilitie: Possibilitie
}

input PossibilitiePointWhereUniqueInput {
  id: ID
}

input PossibilitiePointWhereInput {
  AND: [PossibilitiePointWhereInput!]
  OR: [PossibilitiePointWhereInput!]
  NOT: [PossibilitiePointWhereInput!]
  id: IDFilter
  name: StringFilter
  possibilitie: PossibilitieWhereInput
}

input PossibilitiePointOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PossibilitiePointUpdateInput {
  name: String
  possibilitie: PossibilitieRelateToOneForUpdateInput
}

input PossibilitieRelateToOneForUpdateInput {
  create: PossibilitieCreateInput
  connect: PossibilitieWhereUniqueInput
  disconnect: Boolean
}

input PossibilitiePointUpdateArgs {
  where: PossibilitiePointWhereUniqueInput!
  data: PossibilitiePointUpdateInput!
}

input PossibilitiePointCreateInput {
  name: String
  possibilitie: PossibilitieRelateToOneForCreateInput
}

input PossibilitieRelateToOneForCreateInput {
  create: PossibilitieCreateInput
  connect: PossibilitieWhereUniqueInput
}

type StagePoint {
  id: ID!
  name: String
  stage: Stage
}

input StagePointWhereUniqueInput {
  id: ID
}

input StagePointWhereInput {
  AND: [StagePointWhereInput!]
  OR: [StagePointWhereInput!]
  NOT: [StagePointWhereInput!]
  id: IDFilter
  name: StringFilter
  stage: StageWhereInput
}

input StagePointOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input StagePointUpdateInput {
  name: String
  stage: StageRelateToOneForUpdateInput
}

input StageRelateToOneForUpdateInput {
  create: StageCreateInput
  connect: StageWhereUniqueInput
  disconnect: Boolean
}

input StagePointUpdateArgs {
  where: StagePointWhereUniqueInput!
  data: StagePointUpdateInput!
}

input StagePointCreateInput {
  name: String
  stage: StageRelateToOneForCreateInput
}

input StageRelateToOneForCreateInput {
  create: StageCreateInput
  connect: StageWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createClient(data: ClientCreateInput!): Client
  createClients(data: [ClientCreateInput!]!): [Client]
  updateClient(where: ClientWhereUniqueInput!, data: ClientUpdateInput!): Client
  updateClients(data: [ClientUpdateArgs!]!): [Client]
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteClients(where: [ClientWhereUniqueInput!]!): [Client]
  createTitle(data: TitleCreateInput!): Title
  createTitles(data: [TitleCreateInput!]!): [Title]
  updateTitle(where: TitleWhereUniqueInput!, data: TitleUpdateInput!): Title
  updateTitles(data: [TitleUpdateArgs!]!): [Title]
  deleteTitle(where: TitleWhereUniqueInput!): Title
  deleteTitles(where: [TitleWhereUniqueInput!]!): [Title]
  createDocument(data: DocumentCreateInput!): Document
  createdocuments(data: [DocumentCreateInput!]!): [Document]
  updateDocument(where: DocumentWhereUniqueInput!, data: DocumentUpdateInput!): Document
  updatedocuments(data: [DocumentUpdateArgs!]!): [Document]
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deletedocuments(where: [DocumentWhereUniqueInput!]!): [Document]
  createContact(data: ContactCreateInput!): Contact
  createContacts(data: [ContactCreateInput!]!): [Contact]
  updateContact(where: ContactWhereUniqueInput!, data: ContactUpdateInput!): Contact
  updateContacts(data: [ContactUpdateArgs!]!): [Contact]
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteContacts(where: [ContactWhereUniqueInput!]!): [Contact]
  createAbout(data: AboutCreateInput!): About
  createAbouts(data: [AboutCreateInput!]!): [About]
  updateAbout(where: AboutWhereUniqueInput!, data: AboutUpdateInput!): About
  updateAbouts(data: [AboutUpdateArgs!]!): [About]
  deleteAbout(where: AboutWhereUniqueInput!): About
  deleteAbouts(where: [AboutWhereUniqueInput!]!): [About]
  createStatistic(data: StatisticCreateInput!): Statistic
  createStatistics(data: [StatisticCreateInput!]!): [Statistic]
  updateStatistic(where: StatisticWhereUniqueInput!, data: StatisticUpdateInput!): Statistic
  updateStatistics(data: [StatisticUpdateArgs!]!): [Statistic]
  deleteStatistic(where: StatisticWhereUniqueInput!): Statistic
  deleteStatistics(where: [StatisticWhereUniqueInput!]!): [Statistic]
  createPossibilitie(data: PossibilitieCreateInput!): Possibilitie
  createpossibilities(data: [PossibilitieCreateInput!]!): [Possibilitie]
  updatePossibilitie(where: PossibilitieWhereUniqueInput!, data: PossibilitieUpdateInput!): Possibilitie
  updatepossibilities(data: [PossibilitieUpdateArgs!]!): [Possibilitie]
  deletePossibilitie(where: PossibilitieWhereUniqueInput!): Possibilitie
  deletepossibilities(where: [PossibilitieWhereUniqueInput!]!): [Possibilitie]
  createStage(data: StageCreateInput!): Stage
  createStages(data: [StageCreateInput!]!): [Stage]
  updateStage(where: StageWhereUniqueInput!, data: StageUpdateInput!): Stage
  updateStages(data: [StageUpdateArgs!]!): [Stage]
  deleteStage(where: StageWhereUniqueInput!): Stage
  deleteStages(where: [StageWhereUniqueInput!]!): [Stage]
  createCase(data: CaseCreateInput!): Case
  createCases(data: [CaseCreateInput!]!): [Case]
  updateCase(where: CaseWhereUniqueInput!, data: CaseUpdateInput!): Case
  updateCases(data: [CaseUpdateArgs!]!): [Case]
  deleteCase(where: CaseWhereUniqueInput!): Case
  deleteCases(where: [CaseWhereUniqueInput!]!): [Case]
  createFaq(data: FaqCreateInput!): Faq
  createFaqs(data: [FaqCreateInput!]!): [Faq]
  updateFaq(where: FaqWhereUniqueInput!, data: FaqUpdateInput!): Faq
  updateFaqs(data: [FaqUpdateArgs!]!): [Faq]
  deleteFaq(where: FaqWhereUniqueInput!): Faq
  deleteFaqs(where: [FaqWhereUniqueInput!]!): [Faq]
  createPossibilitiePoint(data: PossibilitiePointCreateInput!): PossibilitiePoint
  createpossibilitiePoints(data: [PossibilitiePointCreateInput!]!): [PossibilitiePoint]
  updatePossibilitiePoint(where: PossibilitiePointWhereUniqueInput!, data: PossibilitiePointUpdateInput!): PossibilitiePoint
  updatepossibilitiePoints(data: [PossibilitiePointUpdateArgs!]!): [PossibilitiePoint]
  deletePossibilitiePoint(where: PossibilitiePointWhereUniqueInput!): PossibilitiePoint
  deletepossibilitiePoints(where: [PossibilitiePointWhereUniqueInput!]!): [PossibilitiePoint]
  createStagePoint(data: StagePointCreateInput!): StagePoint
  createstagePoints(data: [StagePointCreateInput!]!): [StagePoint]
  updateStagePoint(where: StagePointWhereUniqueInput!, data: StagePointUpdateInput!): StagePoint
  updatestagePoints(data: [StagePointUpdateArgs!]!): [StagePoint]
  deleteStagePoint(where: StagePointWhereUniqueInput!): StagePoint
  deletestagePoints(where: [StagePointWhereUniqueInput!]!): [StagePoint]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  client(where: ClientWhereUniqueInput!): Client
  clients(where: ClientWhereInput! = {}, orderBy: [ClientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClientWhereUniqueInput): [Client!]
  clientsCount(where: ClientWhereInput! = {}): Int
  title(where: TitleWhereUniqueInput!): Title
  titles(where: TitleWhereInput! = {}, orderBy: [TitleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TitleWhereUniqueInput): [Title!]
  titlesCount(where: TitleWhereInput! = {}): Int
  document(where: DocumentWhereUniqueInput!): Document
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  about(where: AboutWhereUniqueInput!): About
  abouts(where: AboutWhereInput! = {}, orderBy: [AboutOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AboutWhereUniqueInput): [About!]
  aboutsCount(where: AboutWhereInput! = {}): Int
  statistic(where: StatisticWhereUniqueInput!): Statistic
  statistics(where: StatisticWhereInput! = {}, orderBy: [StatisticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StatisticWhereUniqueInput): [Statistic!]
  statisticsCount(where: StatisticWhereInput! = {}): Int
  possibilitie(where: PossibilitieWhereUniqueInput!): Possibilitie
  possibilities(where: PossibilitieWhereInput! = {}, orderBy: [PossibilitieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PossibilitieWhereUniqueInput): [Possibilitie!]
  possibilitiesCount(where: PossibilitieWhereInput! = {}): Int
  stage(where: StageWhereUniqueInput!): Stage
  stages(where: StageWhereInput! = {}, orderBy: [StageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StageWhereUniqueInput): [Stage!]
  stagesCount(where: StageWhereInput! = {}): Int
  case(where: CaseWhereUniqueInput!): Case
  cases(where: CaseWhereInput! = {}, orderBy: [CaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CaseWhereUniqueInput): [Case!]
  casesCount(where: CaseWhereInput! = {}): Int
  faq(where: FaqWhereUniqueInput!): Faq
  faqs(where: FaqWhereInput! = {}, orderBy: [FaqOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FaqWhereUniqueInput): [Faq!]
  faqsCount(where: FaqWhereInput! = {}): Int
  possibilitiePoint(where: PossibilitiePointWhereUniqueInput!): PossibilitiePoint
  possibilitiePoints(where: PossibilitiePointWhereInput! = {}, orderBy: [PossibilitiePointOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PossibilitiePointWhereUniqueInput): [PossibilitiePoint!]
  possibilitiePointsCount(where: PossibilitiePointWhereInput! = {}): Int
  stagePoint(where: StagePointWhereUniqueInput!): StagePoint
  stagePoints(where: StagePointWhereInput! = {}, orderBy: [StagePointOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StagePointWhereUniqueInput): [StagePoint!]
  stagePointsCount(where: StagePointWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
